% Generated by roxygen2 (4.0.2): do not edit by hand
\name{es_search}
\alias{es_search}
\title{Full text search of Elasticsearch - URI requests}
\usage{
es_search(index = NULL, type = NULL, raw = FALSE, callopts = list(),
  ...)
}
\arguments{
\item{index}{Index}

\item{type}{Document type}

\item{raw}{If TRUE (default), data is parsed to list. If FALSE, then raw JSON.}

\item{callopts}{Curl args passed on to httr::POST.}

\item{...}{Further args passed on to elastic search HTTP API as parameters.}

\item{verbose}{If TRUE (default) the url call used printed to console.}
}
\description{
Full text search of Elasticsearch - URI requests
}
\details{
There are a lot of terms you can use for Elasticsearch. See here
\url{http://www.elasticsearch.org/guide/reference/query-dsl/} for the documentation.

Here is a list of the common ones:

\itemize{
 \item q The query string (maps to the query_string query, see Query String Query for more
 details).
 \item df The default field to use when no field prefix is defined within the query.
 \item analyzer The analyzer name to be used when analyzing the query string.
 \item default_operator The default operator to be used, can be AND or OR. Defaults to OR.
 \item explain For each hit, contain an explanation of how scoring of the hits was computed.
 \item _source [1.0.0.Beta1] Added in 1.0.0.Beta1.Set to false to disable retrieval of the
 _source field. You can also retrieve part of the document by using _source_include &
 _source_exclude (see the request body documentation for more details)
 \item fields The selective stored fields of the document to return for each hit, comma
 delimited. Not specifying any value will cause no fields to return.
 \item sort Sorting to perform. Can either be in the form of fieldName, or
 fieldName:asc/fieldName:desc. The fieldName can either be an actual field within the document,
 or the special _score name to indicate sorting based on scores. There can be several sort
 parameters (order is important).
 \item track_scores When sorting, set to true in order to still track scores and return them
 as part of each hit.
 \item timeout A search timeout, bounding the search request to be executed within the
 specified time value and bail with the hits accumulated up to that point when expired.
 Defaults to no timeout.
 \item from The starting from index of the hits to return. Defaults to 0.
 \item size The number of hits to return. Defaults to 10.
 \item search_type The type of the search operation to perform. Can be dfs_query_then_fetch,
 dfs_query_and_fetch, query_then_fetch, query_and_fetch, count, scan. Defaults to
 query_then_fetch. See Search Type for more details on the different types of search that can
 be performed.
 \item lowercase_expanded_terms Should terms be automatically lowercased or not. Defaults to
 true.
 \item analyze_wildcard Should wildcard and prefix queries be analyzed or not. Defaults to
 false.
}
}
\examples{
\dontrun{
es_search(index="twitter")
es_search(index="twitter", type="tweet")
es_search(index="twitter", type="mention")
es_search(index="twitter", type="tweet", q="what")
es_search(index="twitter", type="tweet", sort="message")

res <- es_search(index="mran", q="snapshotDate>='2013-10-01'")
res$hits$total

es_search(index="shakespeare", q="what")
res <- es_search(index="shakespeare", q="snapshotDate>='2013-10-01'")
es_search(index="shakespeare", q="createdTime>='2013-10-01'")
es_search(index="shakespeare", size=3, explain=TRUE)

# Get raw data
es_search(index="twitter", type="tweet", raw=TRUE)

# Curl debugging
library('httr')
es_search(index="twitter", type="tweet", callopts=verbose())

es_search(index="shakespeare", size=0, aggs = )
}
}

